/** @internal
 ** @file    imopv.tc
 ** @author  Andrea Vedaldi
 ** @brief   Vectorized image operations - SSE2 - Definition Template
 **/

/* AUTORIGHTS
 Copyright (C) 2007-09 Andrea Vedaldi and Brian Fulkerson

 This file is part of VLFeat, available in the terms of the GNU
 General Public License version 2.
 */

#define JOIN_(a,b) a ## b
#define JOIN(a,b) JOIN_(a,b)
#define JOIN3_(a,b,c) a ## b ## c
#define JOIN3(a,b,c) JOIN3_(a,b,c)

#undef  FLT
#undef  VSIZE
#undef  VSFX
#undef  SFX
#undef  VTYPE
#undef  VMUL
#undef  VADD
#undef  VSTZ
#undef  VLD1
#undef  ALIGNPTR
#undef  ALIGNSTRIDE
#undef  VL_IMCONVCOL
#undef  VL_IMCONVCOLTRI

#if (FLOAT_TYPE == FLOAT_TYPE_FLOAT)
#  define FLT    float
#  define VSIZE  4
#  define VSFX   ps
#  define SFX    vf
#  define VTYPE  __m128
#else
#  define FLT    double
#  define VSIZE  2
#  define VSFX   pd
#  define SFX    vd
#  define VTYPE  __m128d
#endif

#define VMUL            JOIN(_mm_mul_,     VSFX)
#define VADD            JOIN(_mm_add_,     VSFX)
#define VSTZ            JOIN(_mm_setzero_, VSFX)
#define VLD1            JOIN(_mm_load1_,   VSFX)
#define ALIGNPTR        (sizeof(FLT) * VSIZE - 1)
#define ALIGNSTRIDE     (VSIZE - 1)
#define VL_IMCONVCOL    JOIN3(_vl_imconvcol_,    SFX, _sse2)
#define VL_IMCONVCOLTRI JOIN3(_vl_imconvcoltri_, SFX, _sse2)

/* ---------------------------------------------------------------- */
void
VL_IMCONVCOL (FLT* dst, int dst_stride,
              FLT const* src,
              int src_width, int src_height, int src_stride,
              FLT const* filt, int filt_begin, int filt_end,
              int step, unsigned int flags)
{
  int x = 0 ;
  int y ;
  int dheight = (src_height - 1) / step + 1 ;
  vl_bool use_simd  = (src_stride & ALIGNSTRIDE) == 0 ;
  vl_bool transp    = flags & VL_TRANSPOSE ;
  vl_bool zeropad   = (flags & VL_PAD_MASK) == VL_PAD_BY_ZERO ;
  double totcol = 0 ;
  double simdcol = 0 ;
  
  /* let filt point to the last sample of the filter */
  filt += filt_end - filt_begin ;
  
  while (x < src_width) {
    /* Calculate dest[x,y] = sum_p image[x,p] filt[y - p]
     * where supp(filt) = [filt_begin, filt_end] = [fb,fe].
     * 
     * CHUNK_A: y - fe <= p < 0
     *          completes VL_MAX(fe - y, 0) samples
     * CHUNK_B: VL_MAX(y - fe, 0) <= p < VL_MIN(y - fb, height - 1)
     *          completes fe - VL_MAX(fb, height - y) + 1 samples
     * CHUNK_C: completes all samples
     */
    
    FLT const *filti ;
    int stop ; 
    
    if ((x + VSIZE < src_width) & 
        (((vl_intptr)(src + x) & ALIGNPTR) == 0) & 
        use_simd) 
    {
      /* ----------------------------------------------  Vectorized */
      for (y = 0 ; y < src_height ; y += step)  {
        union {VTYPE v ; FLT x [VSIZE] ; } acc ;
        VTYPE v, c ;
        FLT const *srci ;
        acc.v = VSTZ () ;
        v = VSTZ() ;

        filti = filt ;
        stop = filt_end - y ;
        srci = src + x - stop * src_stride ;
        
        if (stop > 0) {
          if (zeropad) {
            v = VSTZ () ;
          } else {
            v = * (VTYPE*) (src + x) ;
          } 
          while (filti > filt - stop) {
            c = VLD1 (filti--) ;
            acc.v = VADD (acc.v,  VMUL (v, c)) ;
            srci += src_stride ;
          }
        }
        
        stop = filt_end - VL_MAX(filt_begin, y - src_height + 1) + 1 ;
        while (filti > filt - stop) {
          v = * (VTYPE*) srci ; 
          c = VLD1 (filti--) ;
          acc.v = VADD (acc.v, VMUL (v, c)) ;
          srci += src_stride ;
        }
        
        if (zeropad) v = VSTZ () ;
        
        stop = filt_end - filt_begin + 1;
        while (filti > filt - stop) {
          c = VLD1 (filti--) ;
          acc.v = VADD (acc.v, VMUL (v, c)) ;
        }
        
        if (transp) {
          *dst = acc.x[0] ; dst += dst_stride ;
          *dst = acc.x[1] ; dst += dst_stride ;
#if(VSIZE == 4)
          *dst = acc.x[2] ; dst += dst_stride ;
          *dst = acc.x[3] ; dst += dst_stride ;          
#endif
          dst += 1 * 1 - VSIZE * dst_stride ;
        } else {
          *dst = acc.x[0] ; dst += 1 ;
          *dst = acc.x[1] ; dst += 1 ;      
#if(VSIZE == 4)
          *dst = acc.x[2] ; dst += 1 ;
          *dst = acc.x[3] ; dst += 1 ;
#endif
          dst += 1 * dst_stride - VSIZE * 1 ;
        }        
      } /* next y */
      if (transp) {
        dst += VSIZE * dst_stride - dheight * 1 ;
      } else {
        dst += VSIZE * 1 - dheight * dst_stride ;
      }
      x       += VSIZE ;
      simdcol += VSIZE ;
      totcol  += VSIZE ;
    } else {
      /* -------------------------------------------------  Vanilla */
      for (y = 0 ; y < src_height ; y += step) {
        FLT acc = 0 ;  
        FLT v = 0, c ;
        FLT const* srci ;
        
        filti = filt ;
        stop = filt_end - y ;
        srci = src + x - stop * src_stride ;
        
        if (stop > 0) {   
          if (zeropad) {
            v = 0 ;
          } else {
            v = *(src + x) ;
          }
          while (filti > filt - stop) { 
            c = *filti-- ;
            acc += v * c ;
            srci += src_stride ;
          }
        }
        
        stop = filt_end - VL_MAX(filt_begin, y - src_height + 1) + 1 ;
        while (filti > filt - stop) {
          v = *srci ; 
          c = *filti-- ;
          acc += v * c ;
          srci += src_stride ;
        }
        
        if (zeropad) v = 0 ;
        
        stop = filt_end - filt_begin + 1 ;
        while (filti > filt - stop) {
          c = *filti-- ;
          acc += v * c ;
        }
        
        if (transp) {
          *dst = acc ; dst += 1 ;          
        } else {
          *dst = acc ; dst += dst_stride ;
        }
      } /* next y */
      if (transp) {
        dst += 1 * dst_stride - dheight * 1 ;
      } else {
        dst += 1 * 1 - dheight * dst_stride ;
      }
      x      += 1 ;
      totcol += 1 ;
    } /* next x */
  }
}

#if 0
/* ---------------------------------------------------------------- */
VL_EXPORT
void
VL_IMCONVCOLTRI (FLT* dst, int dst_stride,
                 FLT const* src,
                 int src_width, int src_height, int src_stride,
                 int filt_size,
                 int step, unsigned int flags)
{
  int x = 0 ;
  int y ;
  int dheight = (src_height - 1) / step + 1 ;
  vl_bool use_simd  = ((src_stride & ALIGNSTRIDE) == 0) && 
  (! (flags & VL_NO_SIMD)) ;
  vl_bool transp = flags & VL_TRANSPOSE ;
  vl_bool zeropad = (flags & VL_PAD_MASK) == VL_PAD_BY_ZERO ;
  
  FLT * buff = vl_malloc(sizeof(FLT) * (src_height + filt_size)) ;
#define fa (1.0 / (double) (filt_size + 1))
  FLT scale = fa*fa*fa*fa ;  
  buff += filt_size ;
  
  while (x < src_width) {
    FLT const *srci ;

    use_simd = 0 ;
    if ((x + VSIZE < src_width) & 
        (((vl_ptrint)(src + x) & ALIGNPTR) == 0) & 
        use_simd) 
    {
      
    } else {
      int stridex = transp ? dst_stride : 1 ;
      int stridey = transp ? 1 : dst_stride ;
      srci = src + x + src_stride * (src_height - 1) ;
      
      /* integrate backward the column */
      buff [src_height - 1] = *srci ;
      for (y = src_height-2 ; y >=  0 ; --y) {
        srci -= src_stride ;
        buff [y] = buff [y+1] + *srci ;
      }
      if (zeropad) {
        for ( ; y >= - filt_size ; --y) {
          buff [y] = buff [y+1] ;          
        }
      } else {
        for ( ; y >= - filt_size ; --y) {
          buff [y] = buff[y+1] + *srci ;
        }
      }
      
      /* compute the filter forward */
      for (y = - filt_size ; y < src_height - filt_size ; ++y) {
        buff [y] = buff [y] - buff [y + filt_size] ;
      }
      if (! zeropad) {
        for (y = src_height - filt_size ; y < src_height ; ++y) {
          buff [y] = buff [y] - buff [src_height-1]  * 
          (src_height - filt_size - y) ;
        } 
      }
      
      /* integrate forward the column */
      for (y = - filt_size + 1 ; y < src_height ; ++y) {
        buff [y] += buff [y - 1] ;
      } 
      
      /* compute the filter backward */
      for (y = src_height - 1 ; y >= 0 ; --y) {
        dst [x*stridex + y*stridey] 
        = scale * (buff [y] - buff [y - filt_size]) ;
      }
    } /* next y */
    x += 1 ;
  }
  vl_free (buff - filt_size) ;
}
#endif
